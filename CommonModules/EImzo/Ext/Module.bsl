
&НаКлиенте
Функция Верифицировать(Сокет) Экспорт
	Аргументы = Новый Массив;
	Аргументы.Добавить("localhost");
	Аргументы.Добавить("96D0C1491615C82B9A54D9989779DF825B690748224C2B04F500F370D51827CE2644D8D4A82C18184D73AB8530BB8ED537269603F61DB0D03D2104ABF789970B");
	Аргументы.Добавить("127.0.0.1");
	Аргументы.Добавить("A7BCFA5D490B351BE0754130DF03A068F855DB4333D43921125B9CF2670EF6A40370C646B90401955E1F7BC9CDBF59CE0B2C5467D820BE189C845D0B79CFC96F");
	
	Запрос = Новый Структура;
	Запрос.Вставить("name", "apikey");
	Запрос.Вставить("arguments", Аргументы);
	
	Попытка
		Ответ = Сокет.Send(СериализаторJSON.Сериализовать(Запрос));
		СтруктураОтвета = СериализаторJSON.Десериализовать(Ответ);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Если СтруктураОтвета.success = Ложь Тогда
		ВызватьИсключение "E-imzo: " + СтруктураОтвета.reason;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСертификатов(Сокет) Экспорт
	Результат = Новый Массив;
	
	Запрос = Новый Структура;
	Запрос.Вставить("plugin", "pfx");
	Запрос.Вставить("name", "list_all_certificates");
	
	Попытка
		Ответ = Сокет.Send(СериализаторJSON.Сериализовать(Запрос));
		СтруктураОтвета = СериализаторJSON.Десериализовать(Ответ);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Если СтруктураОтвета.success = Ложь Тогда
		ВызватьИсключение "E-imzo: " + СтруктураОтвета.reason;
	КонецЕсли;
	
	Для Каждого Сертификат Из СтруктураОтвета.certificates Цикл
		Параметры = РаспарситьПсевдоним(Сертификат.alias);
		
		Запись = Новый Структура;
		Запись.Вставить("Код", Параметры.СерийныйНомер);
		Запись.Вставить("Наименование", Параметры.ИНН + " - " + Параметры.ВладелецФИО + ?(ЗначениеЗаполнено(Параметры.Организация), " [" + Параметры.Организация + "]", ""));
		Запись.Вставить("Организация", Параметры.Организация);
		Запись.Вставить("ИНН", Параметры.ИНН);
		Запись.Вставить("ПИНФЛ", Параметры.ПИНФЛ);
		Запись.Вставить("Имя", Сертификат.name);
		Запись.Вставить("Диск", Сертификат.disk);
		Запись.Вставить("Путь", Сертификат.path);
		Запись.Вставить("Псевдоним", Сертификат.alias);
		Запись.Вставить("Срок", Параметры.ДатаОкончания);
		Запись.Вставить("Тип", Параметры.Тип);
		
		Результат.Добавить(Запись);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция Загрузить(Сокет, Сертификат) Экспорт
	Ключ = ВременныеПараметры.Получить("Имзо-Ключ");
	
	Если ЗначениеЗаполнено(Ключ) Тогда
		Возврат Ключ;
	КонецЕсли;
	
	Аргументы = Новый Массив;
	Аргументы.Добавить(ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Сертификат, "Диск"));
	Аргументы.Добавить(ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Сертификат, "Путь"));
	Аргументы.Добавить(ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Сертификат, "Имя"));
	Аргументы.Добавить(ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Сертификат, "Псевдоним"));
	
	Запрос = Новый Структура;
	Запрос.Вставить("plugin", "pfx");
	Запрос.Вставить("name", "load_key");
	Запрос.Вставить("arguments", Аргументы);
	
	Попытка
		Ответ = Сокет.Send(СериализаторJSON.Сериализовать(Запрос));
		СтруктураОтвета = СериализаторJSON.Десериализовать(Ответ);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Если СтруктураОтвета.success = Ложь Тогда
		ВызватьИсключение "E-imzo: " + СтруктураОтвета.reason;
	КонецЕсли;
	
	ВременныеПараметры.Установить("Имзо-Ключ", СтруктураОтвета.keyId);
	
	Возврат СтруктураОтвета.keyId;
КонецФункции

&НаКлиенте
Функция Авторизовать(Сокет, Сертификат, Идентификатор, Повторять = Истина) Экспорт
	Ключ = Загрузить(Сокет, Сертификат);
	
	Аргументы = Новый Массив;
	Аргументы.Добавить(Идентификатор);
	Аргументы.Добавить(Ключ);
	Аргументы.Добавить("no");
	
	Запрос = Новый Структура;
	Запрос.Вставить("plugin", "pkcs7");
	Запрос.Вставить("name", "create_pkcs7");
	Запрос.Вставить("arguments", Аргументы);
	
	Ответ = Сокет.Send(СериализаторJSON.Сериализовать(Запрос));
	Если Ответ = Неопределено Тогда
		ВызватьИсключение "Вебсокет: Не удалось подключиться E-imzo.";
	КонецЕсли;
	
	Попытка
		СтруктураОтвета = СериализаторJSON.Десериализовать(Ответ);
	Исключение
		ВызватьИсключение "Вебсокет: Не удалось расшифровать ответ от E-imzo.";
	КонецПопытки;
	
	Если СтруктураОтвета.success = Ложь Тогда
		ВременныеПараметры.Удалить("Имзо-Ключ");
		
		Если Повторять Тогда
			Возврат Авторизовать(Сокет, Сертификат, Идентификатор, Ложь);
		Иначе
			ВызватьИсключение "E-imzo: " + СтруктураОтвета.reason + ".";
		КонецЕсли;
	Иначе
		Возврат Новый Структура("Подпись,Сигнатура", СтруктураОтвета.pkcs7_64, СтруктураОтвета.signature_hex);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция Подписать(Сокет, Сертификат, ПодписьДокумента, ШтампВремени) Экспорт
	Аргументы = Новый Массив;
	Аргументы.Добавить(ПодписьДокумента);
	Аргументы.Добавить(ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Сертификат, "Код"));
	Аргументы.Добавить(ШтампВремени);
	
	Запрос = Новый Структура;
	Запрос.Вставить("plugin", "pkcs7");
	Запрос.Вставить("name", "attach_timestamp_token_pkcs7");
	Запрос.Вставить("arguments", Аргументы);
	
	Попытка
		Ответ = Сокет.Send(СериализаторJSON.Сериализовать(Запрос));
		СтруктураОтвета = СериализаторJSON.Десериализовать(Ответ);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Если СтруктураОтвета.success = Ложь Тогда
		ВызватьИсключение "E-imzo: " + СтруктураОтвета.reason;
	КонецЕсли;
	
	Возврат СтруктураОтвета.pkcs7_64;
КонецФункции

&НаКлиенте
Функция РаспарситьПсевдоним(Псевдоним) Экспорт
	Результат = Новый Структура;
	
	ИменаПараметров = Новый Соответствие;
	ИменаПараметров.Вставить("cn", "ВладелецФИО");
	ИменаПараметров.Вставить("name", "ВладелецИмя");
	ИменаПараметров.Вставить("surname", "ВладелецФамилия");
	ИменаПараметров.Вставить("l", "Район");
	ИменаПараметров.Вставить("st", "Регион");
	ИменаПараметров.Вставить("c", "Страна");
	ИменаПараметров.Вставить("o", "Организация");
	ИменаПараметров.Вставить("uid", "Код");
	ИменаПараметров.Вставить("1.2.860.3.16.1.2", "ПИНФЛ");
	ИменаПараметров.Вставить("ou", "Дополнительно");
	ИменаПараметров.Вставить("t", "Роль");
	ИменаПараметров.Вставить("1.2.860.3.16.1.1", "ИНН");
	ИменаПараметров.Вставить("businesscategory", "Форма");
	ИменаПараметров.Вставить("serialnumber", "СерийныйНомер");
	ИменаПараметров.Вставить("validfrom", "ДатаАктивации");
	ИменаПараметров.Вставить("validto", "ДатаОкончания");
	
	Параметры = Новый Массив;
	
	Части = СтрРазделить(Псевдоним, ",", Ложь);
	Для Каждого Часть Из Части Цикл
		Параметры = СтрРазделить(Часть, "=", Истина);
		
		ИмяПараметра = ИменаПараметров.Получить(Параметры[0]);
		Если ИмяПараметра <> Неопределено Тогда
			Результат.Вставить(ИмяПараметра, Параметры[1]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Параметр Из ИменаПараметров Цикл
		Если Результат.Свойство(Параметр.Значение) = Ложь Тогда
			Результат.Вставить(Параметр.Значение, "");
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() > 0 Тогда
		Результат.ВладелецФИО = ТРег(Результат.ВладелецФИО);
		Результат.ВладелецИмя = ТРег(Результат.ВладелецИмя);
		Результат.ВладелецФамилия = ТРег(Результат.ВладелецФамилия);
		Результат.Район = ТРег(Результат.Район);
		Результат.Регион = ТРег(Результат.Регион);
		Результат.Страна = ВРег(Результат.Страна);
		Результат.Форма = ТРег(Результат.Форма);
		Результат.Организация = ВРег(Результат.Организация);
		Результат.ДатаАктивации = СтроковыеФункции.СтрокаВДату(Результат.ДатаАктивации);
		Результат.ДатаОкончания = СтроковыеФункции.СтрокаВДату(Результат.ДатаОкончания);
		
		Если ЗначениеЗаполнено(Результат.ИНН) Тогда
			Результат.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтрагента.ЮридическоеЛицо"));
		Иначе
			Результат.Вставить("ИНН", Результат.Код);
			Результат.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтрагента.ФизическоеЛицо"));
		КонецЕсли;
		
		Если ВРег(Результат.Организация) = "НЕ УКАЗАНО" Тогда
			Результат.Организация = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
