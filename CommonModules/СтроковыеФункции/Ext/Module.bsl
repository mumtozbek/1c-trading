
#Область Транслитерация
Функция Транслитерация(ЗНАЧ Строка, Реверс = Ложь) Экспорт 
	Соответствия = Новый Соответствие;
	
	ЛатинскиеБуквы    = "A" "B" "V" "G" "D" "E" "Yo" "J" "Z" "I" "Y" "K" "L" "M" "N" "O" "P" "R" "S" "T" "U" "F" "X" "Ц" "Ch" "Sh" "Sh" "Ъ" "Ы" "Ь" "Э" "Yu" "Ya" "a" "b" "v" "g" "d" "e" "yo" "j" "z" "i" "y" "k" "l" "m" "n" "o" "p" "r" "s" "t" "u" "f" "x" "ц" "ch" "sh" "sh" "ъ" "ы" "ь" "э" "yu" "ya";
	КирилическиеБуквы = "А" "Б" "В" "Г" "Д" "Е" "Ё"  "Ж" "З" "И" "Й" "К" "Л" "М" "Н" "О" "П" "Р" "С" "Т" "У" "Ф" "Х" "Ц" "Ч"  "Ш"  "Щ"  "Ъ" "Ы" "Ь" "Э" "Ю"  "Я"  "а" "б" "в" "г" "д" "е" "ё"  "ж" "з" "и" "й" "к" "л" "м" "н" "о" "п" "р" "с" "т" "у" "ф" "х" "ц" "ч"  "ш"  "щ"  "ъ" "ы" "ь" "э" "ю"  "я";

	Для Инд = 1 По СтрЧислоСтрок(КирилическиеБуквы) Цикл
		Соответствия.Вставить(СтрПолучитьСтроку(КирилическиеБуквы, Инд), СтрПолучитьСтроку(ЛатинскиеБуквы, Инд));
	КонецЦикла;
	
	Если Реверс Тогда
		Для Инд = 1 По СтрЧислоСтрок(ЛатинскиеБуквы) Цикл
			Соответствия.Вставить(СтрПолучитьСтроку(ЛатинскиеБуквы, Инд), СтрПолучитьСтроку(КирилическиеБуквы, Инд));
		КонецЦикла;
	КонецЕсли;
	
	ВыходСлова = Новый Массив;
	Слова = СтрРазделить(Строка, " ", Истина);
	Для Каждого Слово Из Слова Цикл
		ПерваяБуква = Неопределено;
		
		Если Лев(Слово, 1) = "Е" Тогда
			ПерваяБуква = "Ye";
		КонецЕсли;
		
		Если Лев(Слово, 1) = "е" Тогда
			ПерваяБуква = "ye";
		КонецЕсли;

		Выход = "";
		Для Инд = 1 по СтрДлина(Слово) Цикл
			Буква = Сред(Слово, Инд, 2);
			
			Символ = Соответствия.Получить(Буква);
			Если Символ = Неопределено Тогда
				Буква = Сред(Слово, Инд, 1);
				
				Символ = Соответствия.Получить(Буква);
			КонецЕсли;
			
			Выход = Выход + ?(Символ = Неопределено, Буква, Символ);
		КонецЦикла;
		
		Если ПерваяБуква <> Неопределено Тогда
			Выход = ПерваяБуква + Сред(Выход, 2, СтрДлина(Выход) - 1);
		КонецЕсли;
		
		ВыходСлова.Добавить(Выход);
	КонецЦикла;
	
	Выход = СтрСоединить(ВыходСлова, " ");
	
	Выход = СтрЗаменить(Выход, "Х", "H");
	Выход = СтрЗаменить(Выход, "х", "h");
	Выход = СтрЗаменить(Выход, "Ц", "S");
	Выход = СтрЗаменить(Выход, "ц", "s");
	Выход = СтрЗаменить(Выход, "Ы", "I");
	Выход = СтрЗаменить(Выход, "ы", "i");
	Выход = СтрЗаменить(Выход, "Ъ", "");
	Выход = СтрЗаменить(Выход, "ъ", "");
	Выход = СтрЗаменить(Выход, "Ь", "");
	Выход = СтрЗаменить(Выход, "ь", "");
	Выход = СтрЗаменить(Выход, "Э", "E");
	Выход = СтрЗаменить(Выход, "э", "е");

	Возврат Выход;
КонецФункции

Функция Транслит(СтрокаВход, Реверс = Ложь) Экспорт

   // Параметры:
   // СтрокаВход - строка на Кириллице или Латинице
   // Реверс - Булево, если Истина, то строка на Латинице. Преобразуем латиницу в Кириллицу
   //                  если Ложь, то строка на Кириллице. Преобразуем латиницу в Латиницу

   ВыходСтрока= "";
   AZ_3 = Новый Соответствие; // три символа (сочетание)
   AZ_2 = Новый Соответствие; // два символа (сочетание)
   AZ_1 = Новый Соответствие; // один символ

   // Соответствие символов
   // кириллицы и латиницы
   AZ_3.Вставить(?(Реверс=Ложь,"щ","sch"),?(Реверс=Истина,"щ","sch"));

   AZ_2.Вставить(?(Реверс=Ложь,"э","je"),?(Реверс=Истина,"э","je"));
   AZ_2.Вставить(?(Реверс=Ложь,"ю","ju"),?(Реверс=Истина,"ю","ju"));
   AZ_2.Вставить(?(Реверс=Ложь,"я","ya"),?(Реверс=Истина,"я","ya"));
   AZ_2.Вставить(?(Реверс=Ложь,"ё","jo"),?(Реверс=Истина,"ё","jo"));
   AZ_2.Вставить(?(Реверс=Ложь,"ж","zh"),?(Реверс=Истина,"ж","zh"));
   AZ_2.Вставить(?(Реверс=Ложь,"ч","ch"),?(Реверс=Истина,"ч","ch"));
   AZ_2.Вставить(?(Реверс=Ложь,"ш","sh"),?(Реверс=Истина,"ш","sh"));

   AZ_1.Вставить(?(Реверс=Ложь,"а","a"),?(Реверс=Истина,"а","a"));
   AZ_1.Вставить(?(Реверс=Ложь,"б","b"),?(Реверс=Истина,"б","b"));
   AZ_1.Вставить(?(Реверс=Ложь,"в","v"),?(Реверс=Истина,"в","v"));
   AZ_1.Вставить(?(Реверс=Ложь,"г","g"),?(Реверс=Истина,"г","g"));
   AZ_1.Вставить(?(Реверс=Ложь,"д","d"),?(Реверс=Истина,"д","d"));
   AZ_1.Вставить(?(Реверс=Ложь,"е","e"),?(Реверс=Истина,"е","e"));
   AZ_1.Вставить(?(Реверс=Ложь,"з","z"),?(Реверс=Истина,"з","z"));
   AZ_1.Вставить(?(Реверс=Ложь,"и","i"),?(Реверс=Истина,"и","i"));
   AZ_1.Вставить(?(Реверс=Ложь,"й","y"),?(Реверс=Истина,"й","y"));
   AZ_1.Вставить(?(Реверс=Ложь,"к","k"),?(Реверс=Истина,"к","k"));
   AZ_1.Вставить(?(Реверс=Ложь,"л","l"),?(Реверс=Истина,"л","l"));
   AZ_1.Вставить(?(Реверс=Ложь,"м","m"),?(Реверс=Истина,"м","m"));
   AZ_1.Вставить(?(Реверс=Ложь,"н","n"),?(Реверс=Истина,"н","n"));
   AZ_1.Вставить(?(Реверс=Ложь,"о","o"),?(Реверс=Истина,"о","o"));
   AZ_1.Вставить(?(Реверс=Ложь,"п","p"),?(Реверс=Истина,"п","p"));
   AZ_1.Вставить(?(Реверс=Ложь,"р","r"),?(Реверс=Истина,"р","r"));
   AZ_1.Вставить(?(Реверс=Ложь,"с","s"),?(Реверс=Истина,"с","s"));
   AZ_1.Вставить(?(Реверс=Ложь,"т","t"),?(Реверс=Истина,"т","t"));
   AZ_1.Вставить(?(Реверс=Ложь,"у","u"),?(Реверс=Истина,"у","u"));
   AZ_1.Вставить(?(Реверс=Ложь,"ф","f"),?(Реверс=Истина,"ф","f"));
   AZ_1.Вставить(?(Реверс=Ложь,"х","h"),?(Реверс=Истина,"х","h"));
   AZ_1.Вставить(?(Реверс=Ложь,"ц","c"),?(Реверс=Истина,"ц","c"));
   AZ_1.Вставить(?(Реверс=Ложь,"ы","i"),?(Реверс=Истина,"ы","i"));
   AZ_1.Вставить(?(Реверс=Ложь,"ъ",""),?(Реверс=Истина,"ъ",""));//#
   AZ_1.Вставить(?(Реверс=Ложь,"ь",""),?(Реверс=Истина,"ь",""));//'
   //AZ_1.Вставить(?(Реверс=Ложь," ","_"),?(Реверс=Истина," ","_"));// пробел

   Для Сч=1 По СтрДлина(СтрокаВход) Цикл

       ТекСимволСтроки = НРЕГ(Сред(СтрокаВход,Сч,3));
       НайденныйСимвол = AZ_3.Получить(ТекСимволСтроки);
       Если НайденныйСимвол = Неопределено Тогда
           ТекСимволСтроки = НРЕГ(Сред(СтрокаВход,Сч,2));
           НайденныйСимвол = AZ_2.Получить(ТекСимволСтроки);
           Если НайденныйСимвол = Неопределено Тогда
               ТекСимволСтроки = НРЕГ(Сред(СтрокаВход,Сч,1));
               НайденныйСимвол = AZ_1.Получить(ТекСимволСтроки);
               Если НайденныйСимвол = Неопределено Тогда
                   ТекСимволСтроки = НРЕГ(Сред(СтрокаВход,Сч,1));
                   НайденныйСимвол = AZ_3.Получить(ТекСимволСтроки);
                   Если НайденныйСимвол = Неопределено Тогда
                       ТекСимволСтроки = НРЕГ(Сред(СтрокаВход,Сч,1));
                       НайденныйСимвол = AZ_2.Получить(ТекСимволСтроки);
                   КонецЕсли;
               КонецЕсли;
           Иначе
               Сч=Сч+1
           КонецЕсли;
       Иначе
           Сч=Сч+2
       КонецЕсли;

       Если НайденныйСимвол <> Неопределено Тогда
           СимволВСтроку = НайденныйСимвол;
       Иначе // Если не нашли соответствие, то оставляем символ как есть
           СимволВСтроку = Сред(СтрокаВход,Сч,1);
       КонецЕсли;

       ВыходСтрока = ВыходСтрока + СимволВСтроку;
   КонецЦикла;

   Возврат ВыходСтрока;

КонецФункции

Функция Транслитерация1(Строка) Экспорт
	// «а», «б», «в», «г», «д», «е», «ё», «ж», «з», «и», «й», «к», «л», «м», «н», «о», «п», «р», «с», «т», «у», «ф», «х», «ц», «ч», «ш», «щ», «ъ», «ы», «ь», «э», «ю», «я»
	
	Соответствия = Новый Соответствие;
	
	Соответствия.Вставить("А", "A");
	Соответствия.Вставить("Б", "B");
	Соответствия.Вставить("В", "V");
	Соответствия.Вставить("Г", "G");
	Соответствия.Вставить("Д", "D");
	Соответствия.Вставить("Е", "E");
	Соответствия.Вставить("Ё", "YO");
	Соответствия.Вставить("Ж", "J");
	Соответствия.Вставить("З", "Z");
	Соответствия.Вставить("И", "I");
	Соответствия.Вставить("Й", "Y");
	Соответствия.Вставить("К", "K");
	Соответствия.Вставить("Л", "L");
	Соответствия.Вставить("М", "M");
	Соответствия.Вставить("Н", "N");
	Соответствия.Вставить("О", "O");
	Соответствия.Вставить("П", "P");
	Соответствия.Вставить("Р", "R");
	Соответствия.Вставить("С", "S");
	Соответствия.Вставить("Т", "T");
	Соответствия.Вставить("У", "U");
	Соответствия.Вставить("Ф", "F");
	Соответствия.Вставить("Х", "H");
	Соответствия.Вставить("Ц", "S");
	Соответствия.Вставить("Ч", "CH");
	Соответствия.Вставить("Ш", "SH");
	Соответствия.Вставить("Щ", "SH");
	Соответствия.Вставить("Ъ", "");
	Соответствия.Вставить("Ы", "I");
	Соответствия.Вставить("Ь", "");
	Соответствия.Вставить("Э", "E");
	Соответствия.Вставить("Ю", "YU");
	Соответствия.Вставить("Я", "YA");
	
	Соответствия.Вставить("а", "a");
	Соответствия.Вставить("б", "b");
	Соответствия.Вставить("в", "v");
	Соответствия.Вставить("г", "g");
	Соответствия.Вставить("д", "d");
	Соответствия.Вставить("е", "e");
	Соответствия.Вставить("ё", "yo");
	Соответствия.Вставить("ж", "j");
	Соответствия.Вставить("з", "z");
	Соответствия.Вставить("и", "i");
	Соответствия.Вставить("й", "y");
	Соответствия.Вставить("к", "k");
	Соответствия.Вставить("л", "l");
	Соответствия.Вставить("м", "m");
	Соответствия.Вставить("н", "n");
	Соответствия.Вставить("о", "o");
	Соответствия.Вставить("п", "p");
	Соответствия.Вставить("р", "r");
	Соответствия.Вставить("с", "s");
	Соответствия.Вставить("т", "t");
	Соответствия.Вставить("у", "u");
	Соответствия.Вставить("ф", "f");
	Соответствия.Вставить("х", "h");
	Соответствия.Вставить("ц", "s");
	Соответствия.Вставить("ч", "ch");
	Соответствия.Вставить("ш", "sh");
	Соответствия.Вставить("щ", "sh");
	Соответствия.Вставить("ъ", "");
	Соответствия.Вставить("ы", "i");
	Соответствия.Вставить("ь", "");
	Соответствия.Вставить("э", "e");
	Соответствия.Вставить("ю", "yu");
	Соответствия.Вставить("я", "ya");
	
	Если Лев(Строка, 1) = "Е" Тогда
		Строка = "Ye" + Сред(Строка, 2, СтрДлина(Строка) - 1);
	КонецЕсли;
	
	Если Лев(Строка, 1) = "е" Тогда
		Строка = "ye" + Сред(Строка, 2, СтрДлина(Строка) - 1);
	КонецЕсли;
	
	Для Каждого Соответствие Из Соответствия Цикл
		Строка = СтрЗаменить(Строка, Соответствие.Ключ, Соответствие.Значение);
	КонецЦикла;
	
	Возврат Строка;
КонецФункции
#КонецОбласти

Функция РаскодироватьСтрокуXML(СтрокаXML) Экспорт
	СтрокаXML = СтрЗаменить(СтрокаXML, "&laquo;", "«");
	СтрокаXML = СтрЗаменить(СтрокаXML, "&raquo;", "»");
	СтрокаXML = СтрЗаменить(СтрокаXML, "&reg;", "®");
	СтрокаXML = СтрЗаменить(СтрокаXML, "&trade;", "™");
	СтрокаXML = СтрЗаменить(СтрокаXML, "&lt;&lt;", "«");
	СтрокаXML = СтрЗаменить(СтрокаXML, "&gt;&gt;", "»");
	СтрокаXML = СтрЗаменить(СтрокаXML, "&lt;", "«");
	СтрокаXML = СтрЗаменить(СтрокаXML, "&gt;", "»");
	СтрокаXML = СтрЗаменить(СтрокаXML, "&quot;", """");
	//СтрокаXML = СтрЗаменить(СтрокаXML, "&amp;", "&");
	
	Возврат СтрокаXML;
КонецФункции

Функция ЗакодироватьBase64(СтрокаДляКодирования) Экспорт
	Возврат Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(СтрокаДляКодирования));
КонецФункции

Функция ДекодироватьBase64(СтрокаДляКодирования) Экспорт
	Возврат ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(СтрокаДляКодирования));
КонецФункции

Функция Хэшировать(Строка, Ключ = "") Экспорт
    Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(Ключ);
	Хеширование.Добавить(Строка);
	Возврат Хеширование.ХешСумма;
КонецФункции

// Преобразует исходную строку в дату.
//
// Параметры:
//  Значение - Строка - строка, которую необходимо привести к дате.
//                      Формат даты должен быть в виде "ДД.ММ.ГГГГ" или "ДД/ММ/ГГ" или "ДД-ММ-ГГ",
//                      Например, "23.02.1980" или "23/02/80".
// 
// Возвращаемое значение:
//  Дата - полученная дата.
//
Функция СтрокаВДату(Знач СтрокаДаты) Экспорт 

   Если ТипЗнч(СтрокаДаты) = Тип("Дата") Тогда 
       Возврат СтрокаДаты;
   ИначеЕсли ТипЗнч(СтрокаДаты) <> Тип("Строка") Или ПустаяСтрока(СтрокаДаты) Тогда 
       Возврат Дата(1,1,1);
   КонецЕсли;

   СтрокаДаты = ВРег(СтрокаДаты);
   НеобходимоПриводитьКМестномуВремени = Ложь;
   СимволРазделенияДаты = СтрНайти(СтрокаДаты, "T", НаправлениеПоиска.СКонца);
   Если СимволРазделенияДаты = 0 Тогда 
       СимволРазделенияДаты = СтрНайти(СтрокаДаты, " ", НаправлениеПоиска.СКонца);
   КонецЕсли;

   СмещениеЧасы = 0;
   СмещениеМинуты = 0;
   ВремяМеньшеUTC = Ложь;

   Если СтрНайти(СтрокаДаты, "Z") > 0 Тогда 
       НеобходимоПриводитьКМестномуВремени = Истина;
       СтрокаДаты = СтрЗаменить(СтрокаДаты, "Z", ".");
   ИначеЕсли СимволРазделенияДаты > 0 Тогда 
       СимволЧП = СтрНайти(СтрокаДаты, "-",, СимволРазделенияДаты);
       Если СимволЧП = 0 Или СимволЧП <= СимволРазделенияДаты Тогда 
           СимволЧП = СтрНайти(СтрокаДаты, "+",, СимволРазделенияДаты);
       Иначе 
           ВремяМеньшеUTC = Истина;
       КонецЕсли;
       Если СимволЧП <> 0 И СимволЧП > СимволРазделенияДаты Тогда 
           НеобходимоПриводитьКМестномуВремени = Истина;
           ЧастьЧП = Сред(СтрокаДаты, СимволЧП + 1);
           мЧастейДаты = СтрРазделить(ЧастьЧП, ":");
           Попытка 
               СмещениеЧасы = ?(мЧастейДаты.Количество() > 0, Число(мЧастейДаты[0]), 0);
               СмещениеМинуты = ?(мЧастейДаты.Количество() > 1, Число(мЧастейДаты[1]), 0);
           Исключение 
           КонецПопытки;
           СтрокаДаты = Лев(СтрокаДаты, СимволЧП - 1);
       КонецЕсли;
   КонецЕсли;

   // Приведем к одному разделителю 
   СтрокаДаты = СтрЗаменить(СтрокаДаты, "-", ".");
   СтрокаДаты = СтрЗаменить(СтрокаДаты, "+", ".");
   СтрокаДаты = СтрЗаменить(СтрокаДаты, "/", ".");
   СтрокаДаты = СтрЗаменить(СтрокаДаты, "\", ".");
   СтрокаДаты = СтрЗаменить(СтрокаДаты, "T", ".");
   СтрокаДаты = СтрЗаменить(СтрокаДаты, "Т", ".");
   СтрокаДаты = СтрЗаменить(СтрокаДаты, ":", ".");
   СтрокаДаты = СтрЗаменить(СтрокаДаты, ";", ".");
   СтрокаДаты = СтрЗаменить(СтрокаДаты, ",", ".");
   СтрокаДаты = СтрЗаменить(СтрокаДаты, " ", ".");

   ПреобразованнаяДата = Дата(1,1,1);
   Год = 1;
   Месяц = 1;
   День = 1;
   Час = 0;
   Минута = 0;
   Секунда = 0;

   мЧастейДаты = СтрРазделить(СтрокаДаты, ".", Ложь);
   Если мЧастейДаты.Количество() = 1 Тогда 
       Попытка 
           ПреобразованнаяДата = Дата(мЧастейДаты[0]);
       Исключение 
           ПреобразованнаяДата = Дата(1,1,1);
       КонецПопытки;
       Возврат ПреобразованнаяДата;
   ИначеЕсли мЧастейДаты.Количество() >= 3 Тогда 
       Попытка 
           Месяц = Число(мЧастейДаты[1]);
           Если СтрДлина(мЧастейДаты[0]) = 4 Тогда 
               Год = Число(мЧастейДаты[0]);
               День = Число(мЧастейДаты[2]);
           ИначеЕсли СтрДлина(мЧастейДаты[2]) = 4 Тогда 
               Год = Число(мЧастейДаты[2]);
               День = Число(мЧастейДаты[0]);
           Иначе 
               Год = Число(?(мЧастейДаты[2] >= 50, Цел(Год(ТекущаяДата()) / 100) - 1,
               Цел(Год(ТекущаяДата()) / 100)) + мЧастейДаты[2]);
               День = Число(мЧастейДаты[0]);
           КонецЕсли;
           Час = ?(мЧастейДаты.Количество() > 3, Число(мЧастейДаты[3]), 0);
           Минута = ?(мЧастейДаты.Количество() > 4, Число(мЧастейДаты[4]), 0);
           Секунда = ?(мЧастейДаты.Количество() > 5, Число(мЧастейДаты[5]), 0);
       Исключение 
           Возврат ПреобразованнаяДата;
       КонецПопытки;
   Иначе 
       Возврат ПреобразованнаяДата;
   КонецЕсли;

   Попытка 
       ПреобразованнаяДата = Дата(Год, Месяц, День, Час, Минута, Секунда);
   Исключение 
       ПреобразованнаяДата = Дата(1,1,1);
   КонецПопытки;

   Если Не ПреобразованнаяДата = Дата(1,1,1) И НеобходимоПриводитьКМестномуВремени Тогда 
       ТекущееСмещениеСек = СмещениеСтандартногоВремени();
       ТекСмещениеЧас = Цел(ТекущееСмещениеСек / 3600);
       ТекСмещениеМин = Цел((ТекущееСмещениеСек - ТекСмещениеЧас * 3600) / 60);
       ТекСмещениеМин = ?(ТекСмещениеМин < 0, -1 * ТекСмещениеМин, ТекСмещениеМин);

       ТекущийЧП = СтрШаблон("GMT%1%2:%3", ?(ТекСмещениеЧас >= 0, "+", ""),
       Формат(ТекСмещениеЧас, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0"),
       Формат(ТекСмещениеМин, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0"));
       ПришедшийЧП = СтрШаблон("GMT%1%2:%3", ?(ВремяМеньшеUTC, "-", "+"),
       Формат(СмещениеЧасы, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0"),
       Формат(СмещениеМинуты, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0"));
       Если ТекущийЧП = ПришедшийЧП Тогда 
           Возврат ПреобразованнаяДата;
       КонецЕсли;

       Попытка 
           Если СмещениеЧасы <> 0 Или СмещениеМинуты <> 0 Тогда 
               ПреобразованнаяДата = УниверсальноеВремя(ПреобразованнаяДата, ПришедшийЧП);
           КонецЕсли;
           ПреобразованнаяДата = МестноеВремя(ПреобразованнаяДата, ТекущийЧП);
       Исключение 
       КонецПопытки;
   КонецЕсли;

   Возврат ПреобразованнаяДата;

КонецФункции 
