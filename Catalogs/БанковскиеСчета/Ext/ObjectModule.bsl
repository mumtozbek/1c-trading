
Процедура ПередЗаписью(Отказ)
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номер) И ПометкаУдаления = Ссылка.ПометкаУдаления Тогда
		// Проверка на уникальность
		Если Константы.КонтрольУникальностиБанковскихСчетов.Получить() Тогда
			ДубликатСсылка = НайтиДубликата(ЭтотОбъект);
			Если ЗначениеЗаполнено(ДубликатСсылка) Тогда
				Если ДубликатСсылка.Владелец = Владелец Тогда
					Сообщить("Счет по номеру '" + Номер + "' уже существует у '" + ДубликатСсылка.Владелец.Наименование + "' (Код: " + ДубликатСсылка.Владелец.Код + ")!");
					Отказ = Истина;
				КонецЕсли;
				
				Сообщить("Счет по номеру '" + Номер + "' принадлежит '" + ДубликатСсылка.Владелец.Наименование + "' (Код: " + ДубликатСсылка.Владелец.Код + "), необходимо это исправить!");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Номер = СокрЛП(Номер);
		Наименование = Номер + ", " + Банк.Наименование;
	КонецЕсли;
КонецПроцедуры

Функция НайтиДубликата(Счет) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Номер КАК Номер,
	|	БанковскиеСчета.Владелец КАК Владелец
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ ИСТИНА
	|	И БанковскиеСчета.Номер = &Номер
	|	И БанковскиеСчета.Ссылка <> &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	БанковскиеСчета.Ссылка
	|");

	Запрос.УстановитьПараметр("Номер", СокрЛП(Счет.Номер));
	Запрос.УстановитьПараметр("Ссылка", Счет.Ссылка);
	Запрос.УстановитьПараметр("Владелец", Счет.Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
КонецФункции
