
Процедура ЗаполнитьТовары(Коллекция, Поставщик, Дата, Обновление = Ложь) Экспорт
	ТаблицаЗначений = Коллекция.Выгрузить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Товары.Ссылка КАК Товар,
	|	ИсторияРеквизитовСтавкаНДС.Значение КАК СтавкаНДС,
	|	РегЦенаБазовая.Цена КАК ЦенаБазовая,
	|	РегЦенаПродажная.Цена КАК ЦенаПродажная
	|ИЗ
	|	Справочник.Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныТоваров.СрезПоследних(&Дата, Тип = ""ЦенаБазовая"") КАК РегЦенаБазовая ПО РегЦенаБазовая.Товар.Ссылка = Товары.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныТоваров.СрезПоследних(&Дата, Тип = ""ЦенаПродажная"") КАК РегЦенаПродажная ПО РегЦенаПродажная.Товар.Ссылка = Товары.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРеквизитов.СрезПоследних(&Дата, Реквизит = ""СтавкаНДС"") КАК ИсторияРеквизитовСтавкаНДС ПО ИсторияРеквизитовСтавкаНДС.Ссылка.Ссылка = Товары.Ссылка
	|ГДЕ
	|	Товары.Поставщик = &Поставщик И (Товары.ВидТовара.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТовара.Товар) ИЛИ Товары.ВидТовара.ТипТовара = ЗНАЧЕНИЕ(Перечисление.ТипыТовара.Материал))");
	
	Если Обновление Тогда
		Запрос.Текст = Запрос.Текст + " И Товары.Ссылка В (&МассивТоваров)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Товары.Ссылка";

	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	
	Если Обновление Тогда
		Запрос.УстановитьПараметр("МассивТоваров", ТаблицаЗначений.ВыгрузитьКолонку("Товар"));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаТовар = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока ВыборкаТовар.Следующий() Цикл
		ТекущиеСтроки = ТаблицаЗначений.НайтиСтроки(Новый Структура("Товар", ВыборкаТовар.Товар));
		
		Если ТекущиеСтроки.Количество() > 0 Тогда
			ТекСтрока = ТекущиеСтроки.Получить(0);
		ИначеЕсли Обновление = Ложь Тогда
			ТекСтрока = ТаблицаЗначений.Добавить();
			ТекСтрока.Товар = ВыборкаТовар.Товар;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) = Ложь Тогда
			ТекСтрока.СтавкаНДС = ВыборкаТовар.СтавкаНДС;
		КонецЕсли;
		
		Если ТекСтрока.СтавкаНДС.Ставка = 0 Тогда
			ТекСтрока.СтавкаНДС = СтавкаНДС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.ЦенаБазовая) = Ложь Тогда
			ТекСтрока.ЦенаБазовая = ВыборкаТовар.ЦенаБазовая;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.ЦенаПриходная) = Ложь Тогда
			ТекСтрока.ЦенаПриходная = АрифметическиеФункции.ДобавитьНаценку(ТекСтрока.ЦенаБазовая, ТекСтрока.СтавкаНДС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.ЦенаПродажная) = Ложь Тогда
			ТекСтрока.ЦенаПродажная = ВыборкаТовар.ЦенаПродажная;
		КонецЕсли;
		
		ТекСтрока.СуммаБазовая = ТекСтрока.ЦенаБазовая * ТекСтрока.Количество;
		ТекСтрока.СуммаНДС = АрифметическиеФункции.РассчитатьНаценку(ТекСтрока.СуммаБазовая, ТекСтрока.СтавкаНДС);
		ТекСтрока.СуммаПриходная = ТекСтрока.ЦенаПриходная * ТекСтрока.Количество;
		ТекСтрока.СуммаПродажная = ТекСтрока.ЦенаПродажная * ТекСтрока.Количество;
				
		ТекСтрока.Объем = ТекСтрока.Количество * ВыборкаТовар.Товар.Объем;
		ТекСтрока.Вес = ТекСтрока.Количество * ВыборкаТовар.Товар.Вес;
	КонецЦикла;
	
	Если (НЕ Обновление) Тогда
		ТаблицаЗначений.Сортировать("Товар");
	КонецЕсли;
	
	Коллекция.Сортировать("Товар");
	
	Коллекция.Загрузить(ТаблицаЗначений);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Неопределено") ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Склад = ПараметрыСеанса.Пользователь.Склад;
		Контрагент = Константы.ОсновнойПоставщик.Получить();
		УчетПоСальдо = Истина;
		
		Организация = ПараметрыСеанса.Пользователь.Организация;
		УчетнаяПолитика = УчетныеПолитики.ПолучитьНаДату(Дата, Организация);
		СтавкаНДС = УчетнаяПолитика.СтавкаНДС;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	// Подготовка регистров накопления
	Движения.Остатки.Записывать = Истина;
	Движения.Сальдо.Записывать = Истина;
	Движения.СальдоПоТаре.Записывать = Истина;
	
	// Подготовка регистров сведения
	Движения.ЦеныТоваров.Записывать = Истина;
	Движения.ИсторияРеквизитов.Записывать = Истина;
	
	// Вспомогательные данные
	ОбновленныеЦены = Новый Массив;
	
	// Обработка товаров
	Для Каждого Строка Из Товары Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Товар.ВидТовара.ТипТовара = Перечисления.ТипыТовара.ТараПродажная ИЛИ Строка.Товар.ВидТовара.ТипТовара = Перечисления.ТипыТовара.ТараВозвратная ИЛИ Строка.Товар.ВидТовара.ТипТовара = Перечисления.ТипыТовара.Материал Тогда
			// Приход сальдо по таре
			Движение = Движения.СальдоПоТаре.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Организация = Организация;
			Движение.Товар = Строка.Товар;
			Движение.Контрагент = Контрагент;
			Движение.Количество = Строка.Количество;
			Движение.Сумма = Строка.Количество * Строка.ЦенаБазовая;
		КонецЕсли;
		
		Если Строка.Товар.ВидТовара.ТипТовара = Перечисления.ТипыТовара.Товар ИЛИ Строка.Товар.ВидТовара.ТипТовара = Перечисления.ТипыТовара.Материал Тогда
			// Приход товаров
			Движение = Движения.Остатки.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Склад = Склад;
			Движение.Товар = Строка.Товар;
			Движение.Порожняя = (Строка.Товар.ВидТовара.ТипТовара <> Перечисления.ТипыТовара.Товар);
			Движение.Примечание = глНайтиПримечания(Комментарий);
			Движение.Количество = Строка.Количество;
			Движение.Сумма = Строка.СуммаБазовая;
		ИначеЕсли Строка.Товар.ВидТовара.ТипТовара = Перечисления.ТипыТовара.ТараПродажная ИЛИ Строка.Товар.ВидТовара.ТипТовара = Перечисления.ТипыТовара.ТараВозвратная Тогда
			// Приход пустой тары
			Движение = Движения.Остатки.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Склад = Склад;
			Движение.Товар = Строка.Товар;
			Движение.Порожняя = Истина;
			Движение.Примечание = глНайтиПримечания(Комментарий);
			Движение.Количество = Строка.Количество;
			Движение.Сумма = Строка.Количество * Строка.ЦенаБазовая;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Товар.Тара) Тогда
			// Приход сальдо по таре
			Движение = Движения.СальдоПоТаре.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Организация = Организация;
			Движение.Товар = Строка.Товар.Тара;
			Движение.Контрагент = Контрагент;
			Движение.Количество = Строка.Количество;
			Движение.Сумма = 0;
			
			// Приход тары
			Движение = Движения.Остатки.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Склад = Склад;
			Движение.Товар = Строка.Товар.Тара;
			Движение.Порожняя = Ложь;
			Движение.Примечание = глНайтиПримечания(Комментарий);
			Движение.Количество = Строка.Количество;
			Движение.Сумма = 0;
		КонецЕсли;
		
		Если ОбновленныеЦены.Найти(Строка.Товар) = Неопределено Тогда
			// Цены товара - Базовая цена
			Если Строка.ЦенаБазовая > 0 Тогда
				Движение = Движения.ЦеныТоваров.Добавить();
				Движение.Период = Дата;
				Движение.Товар = Строка.Товар;
				Движение.Тип = "ЦенаБазовая";
				Движение.Цена = Строка.ЦенаБазовая;
			КонецЕсли;
			
			// Цены товара - Приходная цена
			Если Строка.ЦенаБазовая > 0 Тогда
				Движение = Движения.ЦеныТоваров.Добавить();
				Движение.Период = Дата;
				Движение.Товар = Строка.Товар;
				Движение.Тип = "ЦенаПриходная";
				Движение.Цена = Строка.ЦенаПриходная;
			КонецЕсли;
			
			// Цены товара - Отпускная цена
			Если Строка.ЦенаПродажная > 0 Тогда
				Движение = Движения.ЦеныТоваров.Добавить();
				Движение.Период = Дата;
				Движение.Товар = Строка.Товар;
				Движение.Тип = "ЦенаПродажная";
				Движение.Цена = Строка.ЦенаПродажная;
			КонецЕсли;
			
			Движение = Движения.ИсторияРеквизитов.Добавить();
			Движение.Период = Дата;
			Движение.Ссылка = Строка.Товар;
			Движение.Реквизит = "СтавкаНДС";
			Движение.Значение = Строка.СтавкаНДС;
			
			ОбновленныеЦены.Добавить(Строка.Товар);
		КонецЕсли;
	КонецЦикла;
	
	// Сальдо
	Если УчетПоСальдо Тогда
		Движение = Движения.Сальдо.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Организация = Организация;
		Движение.ТипВзаиморасчета = Перечисления.ТипыВзаиморасчета.Безнал;
		Движение.Контрагент = Контрагент;
		Движение.Примечание = глНайтиПримечания(Комментарий);
		Движение.Сумма = Товары.Итог("СуммаПриходная") + ТранспортныеРасходы;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Для Каждого Строка Из Товары Цикл
			Если Строка.СуммаПриходная = 0 Тогда
				Строка.СуммаПриходная = Строка.ЦенаПриходная * Строка.Количество;
			КонецЕсли;
			Если Строка.СуммаПродажная = 0 Тогда
				Строка.СуммаПродажная = Строка.ЦенаПродажная * Строка.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Итоги
	Сумма = Товары.Итог("СуммаПриходная") + ТранспортныеРасходы;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
		ДокументПоВходящемуПоНомеру = Документы.ПоступлениеТМЦ.НайтиПоРеквизиту("НомерВходящегоДокумента", НомерВходящегоДокумента);
		Если (ЗначениеЗаполнено(ДокументПоВходящемуПоНомеру) И ДокументПоВходящемуПоНомеру.Ссылка <> Ссылка) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Неуникальный номер входящего документа.";
			Сообщение.Поле = "НомерВходящегоДокумента";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
