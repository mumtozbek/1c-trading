
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТМЦ") Тогда
		Основание = ДанныеЗаполнения.Ссылка;
		Автор = ПараметрыСеанса.Пользователь;
		Агент = ДанныеЗаполнения.Агент;
		ВидРеализации = ДанныеЗаполнения.ВидРеализации;
		Контрагент = ДанныеЗаполнения.Контрагент;
		Организация = ДанныеЗаполнения.Организация;
		Проект = ДанныеЗаполнения.Проект;
		Склад = ДанныеЗаполнения.Склад;
		СкладНакопления = ДанныеЗаполнения.СкладНакопления;
		Филиал = ДанныеЗаполнения.Филиал;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Товар = ТекСтрокаТовары.Товар;
			НоваяСтрока.СтавкаНДС = ТекСтрокаТовары.СтавкаНДС;
			
			НоваяСтрока.КоличествоПродано = ТекСтрокаТовары.Количество;
			НоваяСтрока.Наценка = ТекСтрокаТовары.Наценка;
			НоваяСтрока.Скидка = ТекСтрокаТовары.Скидка;
			
			НоваяСтрока.ЦенаБазовая = ТекСтрокаТовары.ЦенаБазовая;
			НоваяСтрока.ЦенаОтпускная = ТекСтрокаТовары.ЦенаОтпускная;
			НоваяСтрока.ЦенаПродажная = ТекСтрокаТовары.ЦенаПродажная;
			НоваяСтрока.ЦенаСНаценкой = ТекСтрокаТовары.ЦенаСНаценкой;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка регистров накопления
	Движения.Продажи.Записывать = Истина;
	Движения.Остатки.Записывать = Истина;
	Движения.СальдоПоТаре.Записывать = Истина;
	Движения.Сальдо.Записывать = Истина;
	Движения.Доходы.Записывать = Истина;
	
	Если Полный Тогда
		// Обработка товаров
		Для Каждого Строка Из Основание.Товары Цикл
			Если Строка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Товар) = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			// Расход товаров с остатков
			Если Склад.НеВестиУчет = Ложь Тогда
				Движение = Движения.Остатки.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.Период = Дата;
				Движение.Склад = Склад;
				Движение.Товар = Строка.Товар;
				Движение.Порожняя = (Строка.Товар.ВидТовара.ТипТовара <> Перечисления.ТипыТовара.Товар);
				Движение.Примечание = глНайтиПримечания(Комментарий);
				Движение.Количество = -Строка.Количество;
				Движение.Сумма = -Строка.СуммаБазовая;
				
				Если Склад.Временный = Ложь Тогда
					Если ЗначениеЗаполнено(Строка.Товар.Тара) Тогда
						// Расход тары с остатков
						Движение = Движения.Остатки.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
						Движение.Период = Дата;
						Движение.Склад = Склад;
						Движение.Товар = Строка.Товар.Тара;
						Движение.Примечание = глНайтиПримечания(Комментарий);
						Движение.Количество = -Строка.Количество;
						Движение.Сумма = 0;
						Движение.Порожняя = Ложь;
						
						// Расход сальдо по таре
						Движение = Движения.СальдоПоТаре.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
						Движение.Период = Дата;
						Движение.Организация = Организация;
						Движение.Товар = Строка.Товар.Тара;
						Движение.Контрагент = Контрагент;
						Движение.Количество = -Строка.Количество;
						Движение.Сумма = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Приход товара на временный склад
			Если ВидРеализации.Накапливаемый Тогда
			 	Движение = Движения.Остатки.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Период = Дата;
				Движение.Склад = СкладНакопления;
				Движение.Товар = Строка.Товар;
				Движение.Порожняя = (Строка.Товар.ВидТовара.ТипТовара <> Перечисления.ТипыТовара.Товар);
				Движение.Примечание = глНайтиПримечания(Комментарий);
				Движение.Количество = -Строка.Количество;
				Движение.Сумма = -Строка.СуммаБазовая;
			КонецЕсли;
			
			// Учет продажи
			Если ВидРеализации.УчетПродаж Тогда
				Движение = Движения.Продажи.Добавить();
				Движение.Период = Дата;
				Движение.Склад = Склад;
				Движение.ВидРеализации = ВидРеализации;
				Движение.Контрагент = Контрагент;
				Движение.Агент = Агент;
				Движение.Товар = Строка.Товар;
				Движение.Примечание = глНайтиПримечания(Комментарий);
				Движение.Количество = -Строка.Количество;
				Движение.Объем = -Строка.Объем;
				Движение.СуммаБазовая = -Строка.СуммаБазовая;
				Движение.СуммаСНаценкой = -Строка.СуммаСНаценкой;
				Движение.СуммаПродажная = -Строка.СуммаПродажная;
				Движение.СуммаОтпускная = -Строка.СуммаОтпускная;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Основание.Сумма) Тогда
			// Взаиморасчеты
			Движение = Движения.Сальдо.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Организация = Организация;
			Движение.Контрагент = Контрагент;
			Движение.ТипВзаиморасчета = ВидРеализации.ТипВзаиморасчета;
			Движение.ПоСписании = Склад.Временный;
			Движение.Примечание = глНайтиПримечания(Комментарий);
			Движение.Сумма = -Основание.Сумма;
			
			// Доходы
			Если ВидРеализации.ТипВзаиморасчета = Перечисления.ТипыВзаиморасчета.Нал ИЛИ (ВидРеализации.ТипВзаиморасчета = Перечисления.ТипыВзаиморасчета.Безнал И Склад.Временный) Тогда
				Движение = Движения.Доходы.Добавить();
				
				Если Склад.Временный Тогда
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Иначе
					Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				КонецЕсли;
				
				Движение.Период = Дата;
				Движение.Статья = Справочники.СтатьиДоходовИРасходов.РозничнаяТорговля;
				Движение.Реализация = Истина;
				Движение.Примечание = глНайтиПримечания(Комментарий);
				Движение.Сумма = -Основание.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидРеализации.Заказываемый И ЗначениеЗаполнено(Основание) И ЗначениеЗаполнено(Основание.Заказ) Тогда
			Запись = Движения.ИсторияЗаказов.Добавить();
			Запись.Период = Дата;
			Запись.Заказ = Основание.Заказ;
			Запись.Статус = Перечисления.СтатусыЗаказа.ПолныйВозврат;
		КонецЕсли;
	Иначе
		// Обработка товаров
		Для Каждого Строка Из Товары Цикл
			Если Строка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Товар) = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			// Расход товаров с остатков
			Если Склад.НеВестиУчет = Ложь Тогда
				Движение = Движения.Остатки.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.Период = Дата;
				Движение.Склад = Склад;
				Движение.Товар = Строка.Товар;
				Движение.Порожняя = (Строка.Товар.ВидТовара.ТипТовара <> Перечисления.ТипыТовара.Товар);
				Движение.Примечание = глНайтиПримечания(Комментарий);
				Движение.Количество = -Строка.Количество;
				Движение.Сумма = -Строка.СуммаБазовая;
				
				Если Склад.Временный = Ложь Тогда
					Если ЗначениеЗаполнено(Строка.Товар.Тара) Тогда
						// Расход тары с остатков
						Движение = Движения.Остатки.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
						Движение.Период = Дата;
						Движение.Склад = Склад;
						Движение.Товар = Строка.Товар.Тара;
						Движение.Примечание = глНайтиПримечания(Комментарий);
						Движение.Количество = -Строка.Количество;
						Движение.Сумма = 0;
						Движение.Порожняя = Ложь;
						
						// Расход сальдо по таре
						Движение = Движения.СальдоПоТаре.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
						Движение.Период = Дата;
						Движение.Организация = Организация;
						Движение.Товар = Строка.Товар.Тара;
						Движение.Контрагент = Контрагент;
						Движение.Количество = -Строка.Количество;
						Движение.Сумма = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Приход товара на временный склад
			Если ВидРеализации.Накапливаемый Тогда
			 	Движение = Движения.Остатки.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Период = Дата;
				Движение.Склад = СкладНакопления;
				Движение.Товар = Строка.Товар;
				Движение.Порожняя = (Строка.Товар.ВидТовара.ТипТовара <> Перечисления.ТипыТовара.Товар);
				Движение.Примечание = глНайтиПримечания(Комментарий);
				Движение.Количество = -Строка.Количество;
				Движение.Сумма = -Строка.СуммаБазовая;
			КонецЕсли;
			
			// Учет продажи
			Если ВидРеализации.УчетПродаж Тогда
				Движение = Движения.Продажи.Добавить();
				Движение.Период = Дата;
				Движение.Склад = Склад;
				Движение.ВидРеализации = ВидРеализации;
				Движение.Контрагент = Контрагент;
				Движение.Агент = Агент;
				Движение.Товар = Строка.Товар;
				Движение.Примечание = глНайтиПримечания(Комментарий);
				Движение.Количество = -Строка.Количество;
				Движение.Объем = -Строка.Объем;
				Движение.СуммаБазовая = -Строка.СуммаБазовая;
				Движение.СуммаСНаценкой = -Строка.СуммаСНаценкой;
				Движение.СуммаПродажная = -Строка.СуммаПродажная;
				Движение.СуммаОтпускная = -Строка.СуммаОтпускная;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Сумма) Тогда
			// Взаиморасчеты
			Движение = Движения.Сальдо.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Организация = Организация;
			Движение.Контрагент = Контрагент;
			Движение.ТипВзаиморасчета = ВидРеализации.ТипВзаиморасчета;
			Движение.ПоСписании = Склад.Временный;
			Движение.Примечание = глНайтиПримечания(Комментарий);
			Движение.Сумма = -Сумма;
			
			// Доходы
			Если ВидРеализации.ТипВзаиморасчета = Перечисления.ТипыВзаиморасчета.Нал ИЛИ (ВидРеализации.ТипВзаиморасчета = Перечисления.ТипыВзаиморасчета.Безнал И Склад.Временный) Тогда
				Движение = Движения.Доходы.Добавить();
				
				Если Склад.Временный Тогда
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Иначе
					Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				КонецЕсли;
				
				Движение.Период = Дата;
				Движение.Статья = Справочники.СтатьиДоходовИРасходов.РозничнаяТорговля;
				Движение.Реализация = Истина;
				Движение.Примечание = глНайтиПримечания(Комментарий);
				Движение.Сумма = -Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидРеализации.Заказываемый И ЗначениеЗаполнено(Основание) И ЗначениеЗаполнено(Основание.Заказ) Тогда
			Запись = Движения.ИсторияЗаказов.Добавить();
			Запись.Период = Дата;
			Запись.Заказ = Основание.Заказ;
			Запись.Статус = Перечисления.СтатусыЗаказа.ЧастичныйВозврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если глСсылкаСуществует(Основание) = Ложь Тогда
		Основание = Неопределено;
	КонецЕсли;
	
	Если СкладНакопления.Пустая() Тогда
		СкладНакопления = Склад.Накопитель;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Для Каждого Строка Из Товары Цикл
			Если Строка.ЦенаОтпускная = 0 Тогда
				Строка.ЦенаОтпускная = Строка.ЦенаПродажная;
			КонецЕсли;
			
			Если Строка.СуммаОтпускная = 0 Тогда
				Строка.СуммаОтпускная = Строка.СуммаПродажная;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Полный Тогда
		Сумма = Основание.Сумма;
	Иначе
		Сумма = Товары.Итог("СуммаОтпускная");
	КонецЕсли;
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ДокументПоОсновнии = Документы.ВозвратТМЦПокупателя.НайтиПоРеквизиту("Основание", Основание);
	Если ЗначениеЗаполнено(ДокументПоОсновнии) И ДокументПоОсновнии.Ссылка <> Ссылка Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Имеется возврат по выбранной реализации.";
		Сообщение.Поле = "Основание";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		Отказ = Истина;;
	КонецЕсли;
КонецПроцедуры
