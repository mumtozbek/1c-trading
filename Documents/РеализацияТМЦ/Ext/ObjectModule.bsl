
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ДополнительныеСвойства.Свойство("Загрузка") = Ложь Тогда
		УчетнаяПолитика = УчетныеПолитики.ПолучитьНаДату(Дата, Организация);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Неопределено") ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Склад = ПараметрыСеанса.Пользователь.Склад;
		СкладНакопления = Склад.Накопитель;
        Наценка = УчетнаяПолитика.НаценкаПоУмолчанию;
		АвтоОкругление = Константы.Реализация_АвтоматическоеОкруглениеИтоговойСуммыНакладных.Получить();
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказАгента") Тогда
		Заказ = ДанныеЗаполнения.Ссылка;
		
		Организация = ДанныеЗаполнения.Организация;
		Филиал = ДанныеЗаполнения.Филиал;
		Проект = ДанныеЗаполнения.Проект;
		ВидРеализации = ДанныеЗаполнения.ВидРеализации;
		Склад = ДанныеЗаполнения.Склад;
		СкладНакопления = Склад.Накопитель;
		Агент = ДанныеЗаполнения.Агент;
		Контрагент = ДанныеЗаполнения.Контрагент;
		Округление = ДанныеЗаполнения.Округление;
		АвтоОкругление = Константы.Реализация_АвтоматическоеОкруглениеИтоговойСуммыНакладных.Получить();
		Скидка = ДанныеЗаполнения.Скидка;
		Комментарий = ДанныеЗаполнения.Комментарий;
		
		// Заполнение таблицы товаров
		Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл
			ТекСтрока = Товары.Добавить();
			ТекСтрока.Товар = Строка.Товар;
			ТекСтрока.Количество = Строка.Количество;
			
			ТекСтрока.БонусКоличество = Строка.БонусКоличество;
			ТекСтрока.БонусСумма = Строка.БонусСумма;
			
			ТекСтрока.ЦенаПродажная = Строка.ЦенаПродажная;
			ТекСтрока.СуммаПродажная = Строка.СуммаПродажная;
			
			ТекСтрока.Скидка = Строка.Скидка;
			
			ТекСтрока.ЦенаОтпускная = Строка.ЦенаОтпускная;
			ТекСтрока.СуммаОтпускная = Строка.СуммаОтпускная;
			
			ТекСтрока.Объем = Строка.Объем;
			ТекСтрока.Вес = Строка.Вес;
		КонецЦикла;
		
		// Корректировка данных
		Если ДополнительныеСвойства.Свойство("Загрузка") = Ложь Тогда
			РаботаСТоварами.Заполнить(ЭтотОбъект, "Товары", Истина);
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Проверка на уникальность на реквизит "Заказ"
	Если глСсылкаСуществует(Заказ) Тогда
		Документ = Документы.РеализацияТМЦ.НайтиПоРеквизиту("Заказ", Заказ);
		Если ЗначениеЗаполнено(Документ) и Документ.Ссылка <> Ссылка Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Неуникальный заказ: " + Заказ;
			Сообщение.Поле = "Заказ";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			
			//ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Заказ"));
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка регистров накопления
	Движения.Продажи.Записывать = Истина;
	Движения.Остатки.Записывать = Истина;
	Движения.СальдоПоТаре.Записывать = Истина;
	Движения.Сальдо.Записывать = Истина;
	Движения.Доходы.Записывать = Истина;
	Движения.ИсторияЗаказов.Записывать = Истина;
	
	// Обработка товаров
	Для Каждого Строка Из Товары Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Товар) = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		// Контроль текущих остатков товара
		Если Склад.КонтрольОстатков И ПривилегированныйРежим() = Ложь Тогда
			Если (Строка.ОстатокДо - Строка.Количество) < 0 Тогда
				Сообщить("Недостаточно товаров на складе: " + Строка.НомерСтроки + ". " + Строка.Товар.Наименование + " (" + Строка.Товар.Код + ")", СтатусСообщения.ОченьВажное);
				
				Если Дата > НачалоНедели(ТекущаяДата()) Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Расход товаров с остатков
		Если Склад.НеВестиУчет = Ложь Тогда
			Движение = Движения.Остатки.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Склад = Склад;
			Движение.Товар = Строка.Товар;
			Движение.Порожняя = (Строка.Товар.ВидТовара.ТипТовара <> Перечисления.ТипыТовара.Товар);
			Движение.Примечание = глНайтиПримечания(Комментарий);
			Движение.Количество = Строка.Количество;
			Движение.Сумма = Строка.СуммаБазовая;
			
			Если Склад.Временный = Ложь Тогда
				Если ЗначениеЗаполнено(Строка.Товар.Тара) Тогда
					// Расход тары с остатков
					Движение = Движения.Остатки.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Период = Дата;
					Движение.Склад = Склад;
					Движение.Товар = Строка.Товар.Тара;
					Движение.Примечание = глНайтиПримечания(Комментарий);
					Движение.Количество = Строка.Количество;
					Движение.Сумма = 0;
					Движение.Порожняя = Ложь;
					
					// Расход сальдо по таре
					Движение = Движения.СальдоПоТаре.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Период = Дата;
					Движение.Организация = Организация;
					Движение.Товар = Строка.Товар.Тара;
					Движение.Контрагент = Контрагент;
					Движение.Количество = Строка.Количество;
					Движение.Сумма = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Приход товара на временный склад
		Если ВидРеализации.Накапливаемый Тогда
		 	Движение = Движения.Остатки.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Склад = СкладНакопления;
			Движение.Товар = Строка.Товар;
			Движение.Порожняя = (Строка.Товар.ВидТовара.ТипТовара <> Перечисления.ТипыТовара.Товар);
			Движение.Примечание = глНайтиПримечания(Комментарий);
			Движение.Количество = Строка.Количество;
			Движение.Сумма = Строка.СуммаБазовая;
		КонецЕсли;
		
		// Учет продажи
		Если ВидРеализации.УчетПродаж Тогда
			Движение = Движения.Продажи.Добавить();
			Движение.Период = Дата;
			Движение.Склад = Склад;
			Движение.ВидРеализации = ВидРеализации;
			Движение.Контрагент = Контрагент;
			Движение.Агент = Агент;
			Движение.Товар = Строка.Товар;
			Движение.Примечание = глНайтиПримечания(Комментарий);
			Движение.Количество = Строка.Количество;
			Движение.Объем = Строка.Объем;
			Движение.СуммаБазовая = Строка.СуммаБазовая;
			Движение.СуммаСНаценкой = Строка.СуммаСНаценкой;
			Движение.СуммаПродажная = Строка.СуммаПродажная;
			Движение.СуммаОтпускная = Строка.СуммаОтпускная;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Сумма) Тогда
		// Взаиморасчеты
		Движение = Движения.Сальдо.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Организация = Организация;
		Движение.Контрагент = Контрагент;
		Движение.ТипВзаиморасчета = ВидРеализации.ТипВзаиморасчета;
		Движение.ПоСписании = Склад.Временный;
		Движение.Примечание = глНайтиПримечания(Комментарий);
		Движение.Сумма = Сумма;
		
		// Доходы
		Если ВидРеализации.ТипВзаиморасчета = Перечисления.ТипыВзаиморасчета.Нал ИЛИ (ВидРеализации.ТипВзаиморасчета = Перечисления.ТипыВзаиморасчета.Безнал И Склад.Временный) Тогда
			Движение = Движения.Доходы.Добавить();
			
			Если Склад.Временный Тогда
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Иначе
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;
			
			Движение.Период = Дата;
			Движение.Статья = Справочники.СтатьиДоходовИРасходов.РозничнаяТорговля;
			Движение.Реализация = Истина;
			Движение.Примечание = глНайтиПримечания(Комментарий);
			Движение.Сумма = Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Если глСсылкаСуществует(Заказ) Тогда
		Если ВидРеализации.Заказываемый Тогда
			Запись = Движения.ИсторияЗаказов.Добавить();
			Запись.Период = Макс(Дата, Заказ.Дата);
			Запись.Заказ = Заказ;
			Запись.Статус = Перечисления.СтатусыЗаказа.Принятый;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если глСсылкаСуществует(Заказ) Тогда
		ЗаказОбъект = Заказ.ПолучитьОбъект();
		ЗаказОбъект.Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отгрузка) И Отгрузка.Проведен И Отгрузка.Статус <> Перечисления.СтатусыОтгрузки.Оформлен Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если глСсылкаСуществует(Заказ) = Ложь Тогда
		Заказ = Неопределено;
	КонецЕсли;
	
	Если глСсылкаСуществует(Отгрузка) = Ложь Тогда
		Отгрузка = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СкладНакопления) = Ложь Тогда
		СкладНакопления = Склад.Накопитель;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Если Дата > КонецДня(ТекущаяДата()) Тогда
			Дата = РаботаСДокументами.ПолучитьВремяНовогоДокумента(ЭтотОбъект);
		КонецЕсли;
	Иначе
		Если Модифицированность() Тогда
			Если ПользователиИБ.ЭтоАдминистратор() = Ложь Тогда
				// Проверка ЭДО
				ДокументЭДО = ЭлектронныеДокументы.Получить(Ссылка);
				Если ЗначениеЗаполнено(ДокументЭДО) Тогда
					ВызватьИсключение "Нельзя редактировать и/или удалять отправленные на ЭДО документы.";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		Если Заказ.Дата > Дата Тогда
			Сообщить("Дата заказа (" + СокрЛП(Заказ.Ссылка) + ") не может быть позднее даты реализации (" + СокрЛП(Ссылка) + ").");
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отгрузка) Тогда
		Если Отгрузка.Дата < Дата Тогда
			Сообщить("Дата реализации (" + СокрЛП(Ссылка) + ") не может быть позднее даты отгрузки (" + СокрЛП(Отгрузка) + ").");
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Константы.Реализация_ПересчетОстатковПриПроведенииДокумента.Получить() Тогда
			РаботаСТоварами.Заполнить(ЭтотОбъект, "Товары", Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Пересчет
	Для Каждого Строка Из Товары Цикл
		Если Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.КоличествоУпаковок = 0 Тогда
			Строка.КоличествоУпаковок = Строка.Количество / Строка.Товар.ВместимостьУпаковки;
		КонецЕсли;
		
		Строка.Объем = Строка.Количество * Строка.Товар.Объем;
		Строка.Вес = Строка.Количество * Строка.Товар.Вес;
	КонецЦикла;
	
	Сумма = Товары.Итог("СуммаОтпускная") - Товары.Итог("БонусСумма") + Округление;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если глСсылкаСуществует(Заказ) Тогда
		ЗаказОбъект = Заказ.ПолучитьОбъект();
		
		Если ВидРеализации <> Заказ.ВидРеализации Тогда
			ЗаказОбъект.ВидРеализации = ВидРеализации;
		КонецЕсли;
		
		Если Склад <> Заказ.Склад Тогда
			ЗаказОбъект.Склад = Склад;
		КонецЕсли;
		
		Если Контрагент <> Заказ.Контрагент Тогда
			ЗаказОбъект.Контрагент = Контрагент;
		КонецЕсли;
		
		ЗаказОбъект.ДополнительныеСвойства.Вставить("Подтвержден");
		ЗаказОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		ЗаказОбъект.Записать();
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
        Если глСсылкаСуществует(Отгрузка) Тогда
			ОтгрузкаОбъект = Отгрузка.ПолучитьОбъект();
			Строка = ОтгрузкаОбъект.Накладные.Найти(Ссылка, "Накладная");
			Если Строка <> Неопределено Тогда
				Строка.Отгрузить = Ложь;
				//ОтгрузкаОбъект.Накладные.Удалить(Строка);
				ОтгрузкаОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПользователиИБ.ЭтоАдминистратор() = Ложь Тогда
		Если ЗначениеЗаполнено(Отгрузка) И Отгрузка.Проведен И Отгрузка.Статус <> Перечисления.СтатусыОтгрузки.Оформлен Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если глСсылкаСуществует(Заказ) Тогда
		ЗаказОбъект = Заказ.ПолучитьОбъект();
		ЗаказОбъект.УстановитьПометкуУдаления(Истина);
	КонецЕсли;
	
	Если глСсылкаСуществует(Отгрузка) Тогда
		ОтгрузкаОбъект = Отгрузка.ПолучитьОбъект();
		Строка = ОтгрузкаОбъект.Накладные.Найти(Ссылка, "Накладная");
		Если Строка <> Неопределено Тогда
			Строка.Отгрузить = Ложь;
			//ОтгрузкаОбъект.Накладные.Удалить(Строка);
			ОтгрузкаОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
