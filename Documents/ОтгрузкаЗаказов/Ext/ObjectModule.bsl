
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Неопределено") ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ДатаНачала = ТекущаяДата();
		Склад = ПараметрыСеанса.Пользователь.Склад;
		Водитель = Справочники.Сотрудники.ПустаяСсылка();
		Автомашина = Справочники.ТранспортныеСредства.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Отгрузки.Записывать = Истина;
	Движения.ИсторияЗаказов.Записывать = Истина;
	
	Для Каждого Строка Из Накладные Цикл
		Если ЗначениеЗаполнено(Строка.Накладная) = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Накладная.Дата > Дата Тогда
			Сообщить("Дата реализации (" + СокрЛП(Строка.Накладная) + ") не может быть позднее даты отгрузки (" + СокрЛП(Ссылка) + ").");
			
			Отказ = Истина;
		КонецЕсли;
		
		Если Водитель <> Доставщик Тогда
		 	Движение = Движения.Отгрузки.Добавить();
			Движение.Период = Дата;
			Движение.Сотрудник = Водитель;
			Движение.Примечание = глНайтиПримечания(Комментарий);
			Движение.Сумма = Строка.Накладная.Товары.Итог("СуммаПродажная") / 2;
			
		 	Движение = Движения.Отгрузки.Добавить();
			Движение.Период = Дата;
			Движение.Сотрудник = Доставщик;
			Движение.Примечание = глНайтиПримечания(Комментарий);
			Движение.Сумма = Строка.Накладная.Товары.Итог("СуммаПродажная") / 2;
		Иначе
		 	Движение = Движения.Отгрузки.Добавить();
			Движение.Период = Дата;
			Движение.Сотрудник = Доставщик;
			Движение.Примечание = глНайтиПримечания(Комментарий);
			Движение.Сумма = Строка.Накладная.Товары.Итог("СуммаПродажная");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Накладная.Заказ) Тогда
			Запись = Движения.ИсторияЗаказов.Добавить();
			Запись.Период = Макс(Дата, Строка.Накладная.Дата, Строка.Накладная.Заказ.Дата);
			Запись.Заказ = Строка.Накладная.Заказ;
			Если Статус = Перечисления.СтатусыОтгрузки.Оформлен Тогда
				Запись.Статус = Перечисления.СтатусыЗаказа.Обрабатываемый;
			ИначеЕсли Статус = Перечисления.СтатусыОтгрузки.Отгружен Тогда
				Запись.Статус = Перечисления.СтатусыЗаказа.Отгруженный;
			ИначеЕсли Статус = Перечисления.СтатусыОтгрузки.Доставлен Тогда
				Запись.Статус = Перечисления.СтатусыЗаказа.Доставленный;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Открепление отгрузки от накладных
	Выборка = Документы.РеализацияТМЦ.Выбрать(,,Новый Структура("Отгрузка", Ссылка));
	Пока Выборка.Следующий() Цикл
		Строка = Накладные.Найти(Выборка.Ссылка, "Накладная");
		Если Строка = Неопределено ИЛИ Строка.Отгрузить = Ложь Тогда
			НакладнаяОбъект = Выборка.ПолучитьОбъект();
			НакладнаяОбъект.Отгрузка = Неопределено;
			НакладнаяОбъект.Записать(?(НакладнаяОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Накладные Цикл
		// Прикрепление отгрузки к накладным
		Если глСсылкаСуществует(Строка.Накладная) Тогда
			Если Строка.Накладная.Отгрузка <> Ссылка Тогда
				НакладнаяОбъект = Строка.Накладная.ПолучитьОбъект();
				НакладнаяОбъект.Отгрузка = Ссылка;
				НакладнаяОбъект.Записать(?(НакладнаяОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Запрос = Новый Запрос("
	//	|ВЫБРАТЬ
	//	|	КассоваяОперация.Ссылка КАК Ссылка,
	//	|	КассоваяОперация.Дата КАК Дата
	//	|ИЗ
	//	|	Документ.КассоваяОперация КАК КассоваяОперация
	//	|ГДЕ
	//	|	КассоваяОперация.Основание = &Основание
	//	|"
	//);
	//
	//Запрос.УстановитьПараметр("Основание", Ссылка);
	//
	//ВыборкаКассоваяОперация = Запрос.Выполнить().Выбрать();
	//Пока ВыборкаКассоваяОперация.Следующий() Цикл
	//	Если ВыборкаКассоваяОперация.Дата < Дата Тогда
	//		Сообщить("Дата отгрузки (" + СокрЛП(Ссылка) + ") не может быть позднее даты кассовой операции (" + СокрЛП(ВыборкаКассоваяОперация.Ссылка) + ").");
	//		
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) = Ложь Тогда
		ДатаНачала = Дата;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Статус = Перечисления.СтатусыОтгрузки.Отменен;
	ИначеЕсли Статус = Перечисления.СтатусыОтгрузки.Отменен Тогда
		Статус = Перечисления.СтатусыОтгрузки.Оформлен;
	КонецЕсли;
	
	// TODO
	// Фильтрация таблицы
	Индекс = Накладные.Количество() - 1;
	Пока Индекс >= 0 Цикл 
		Строка = Накладные.Получить(Индекс);
		
		Если Строка.Отгрузить = Ложь Тогда
			Накладные.Удалить(Строка);
		КонецЕсли;
		
		Индекс = Индекс - 1; 
	КонецЦикла;
	
	Для Каждого Строка Из Накладные Цикл
		Строка.Объем = Строка.Накладная.Товары.Итог("Объем");
		Строка.Вес = Строка.Накладная.Товары.Итог("Вес");
	КонецЦикла;
	
	Объем = Накладные.Итог("Объем");
	Вес = Накладные.Итог("Вес");
	Сумма = Накладные.Итог("Сумма");
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Открепление отгрузки от накладных
	Выборка = Документы.РеализацияТМЦ.Выбрать(,,Новый Структура("Отгрузка", Ссылка));
	Пока Выборка.Следующий() Цикл
		НакладнаяОбъект = Выборка.ПолучитьОбъект();
		НакладнаяОбъект.Отгрузка = Неопределено;
		НакладнаяОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ПустыеСтроки = Накладные.НайтиСтроки(Новый Структура("Отгрузить", Ложь)); 
	Для Каждого Строка Из ПустыеСтроки Цикл 
		Накладные.Удалить(Строка); 
	КонецЦикла;
	
	//// Фильтрация таблицы
	//Индекс = Накладные.Количество() - 1;
	//Пока Индекс >= 0 Цикл 
	//	Строка = Накладные.Получить(Индекс);
	//	
	//	Если Строка.Отгрузить = Ложь Тогда
	//		Накладные.Удалить(Строка);
	//	КонецЕсли;
	//	
	//	Индекс = Индекс - 1; 
	//КонецЦикла;
	
	Если Накладные.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не отмечена ни одна накладная на отгрузку.";
		Сообщение.Поле = "Накладные";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Для Каждого Строка Из Накладные Цикл
		Если глСсылкаСуществует(Строка.Накладная) = Ложь Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Накладная не найдена.";
			Сообщение.Поле = "Накладные[" + Строка.НомерСтроки + "].Накладная";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		
		Если Строка.Накладная.Проведен = Ложь Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Накладная не проведена.";
			Сообщение.Поле = "Накладные[" + Строка.НомерСтроки + "].Накладная";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		
		Если Строка.Накладная.Самовывоз Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Накладная помечена как самовывоз.";
			Сообщение.Поле = "Накладные[" + Строка.НомерСтроки + "].Накладная";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
